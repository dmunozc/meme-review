var CACHE_VERSION = 'v0.202';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';
var debugSW = false;

function onInstall(event) {
  if (debugSW) {console.log('[Serviceworker]', "Installing!", event);}
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([

        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%= asset_path "application.js" %>',

        '<%= asset_path "application.css" %>',

        '/offline.html',
        '<%= asset_path "logo.ico" %>',
      ]);
    })
  );
}

function onActivate(event) {
  if (debugSW) {console.log('[Serviceworker]', "Activating!", event);}
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

function onFetch(event) {

  //if (!request.url.match(/^https?:\/\/example.com/) ) { return; }
  //if (request.method !== 'GET') { return; }
  event.respondWith(
    caches.match(event.request).then(function(response) {
        // Cache hit - return response
        return response || fetch(event.request).catch(function(error){
          return caches.match("/offline.html"); 
        });
    })
  );
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
self.addEventListener('message', function(event){
  if (debugSW) {console.log(event.data);}
  if (event.data.action == "skipWaiting"){
    self.skipWaiting();
  }
});